---
- name: Create kagent namespace
  kubernetes.core.k8s:
    name: "{{ kagent_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  when: node_role == 'master' and kagent_enabled

- name: Create kagent service account
  kubernetes.core.k8s:
    name: kagent
    namespace: "{{ kagent_namespace }}"
    api_version: v1
    kind: ServiceAccount
    state: present
  when: node_role == 'master' and kagent_enabled

- name: Create kagent cluster role
  kubernetes.core.k8s:
    name: kagent
    api_version: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    state: present
    definition:
      rules:
        - apiGroups: [""]
          resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "events", "configmaps", "secrets"]
          verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
        - apiGroups: ["apps"]
          resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
          verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
        - apiGroups: ["monitoring.coreos.com"]
          resources: ["servicemonitors"]
          verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
        - apiGroups: ["apps"]
          resources: ["deployments/scale"]
          verbs: ["get", "update", "patch"]
        - apiGroups: ["networking.k8s.io"]
          resources: ["ingresses"]
          verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  when: node_role == 'master' and kagent_enabled

- name: Create kagent cluster role binding
  kubernetes.core.k8s:
    name: kagent
    api_version: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    state: present
    definition:
      subjects:
        - kind: ServiceAccount
          name: kagent
          namespace: "{{ kagent_namespace }}"
      roleRef:
        kind: ClusterRole
        name: kagent
        apiGroup: rbac.authorization.k8s.io
  when: node_role == 'master' and kagent_enabled

- name: Install Ollama if enabled
  kubernetes.core.helm:
    name: ollama
    chart_ref: ollama/ollama
    release_namespace: "{{ kagent_namespace }}"
    create_namespace: true
    values:
      service:
        type: ClusterIP
        port: 80
      resources:
        requests:
          memory: "{{ ollama_resources.requests.memory }}"
          cpu: "{{ ollama_resources.requests.cpu }}"
        limits:
          memory: "{{ ollama_resources.limits.memory }}"
          cpu: "{{ ollama_resources.limits.cpu }}"
      persistence:
        enabled: true
        size: 20Gi
  when: node_role == 'master' and kagent_enabled and ollama_enabled

- name: Wait for Ollama to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: ollama
    namespace: "{{ kagent_namespace }}"
    wait: true
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 600
  when: node_role == 'master' and kagent_enabled and ollama_enabled

- name: Pull Ollama model
  kubernetes.core.k8s_exec:
    namespace: "{{ kagent_namespace }}"
    pod: "{{ item.metadata.name }}"
    command: ollama pull {{ ollama_model }}
  loop: "{{ ollama_pods.resources }}"
  when: node_role == 'master' and kagent_enabled and ollama_enabled

- name: Get Ollama pods
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ kagent_namespace }}"
    label_selectors:
      - "app.kubernetes.io/name=ollama"
  register: ollama_pods
  when: node_role == 'master' and kagent_enabled and ollama_enabled

- name: Create kagent configmap
  kubernetes.core.k8s:
    name: kagent-config
    namespace: "{{ kagent_namespace }}"
    api_version: v1
    kind: ConfigMap
    state: present
    definition:
      data:
        kagent.yaml: |
          providers:
            ollama:
              host: "http://ollama.{{ kagent_namespace }}.svc.cluster.local"
              model: "{{ ollama_model }}"
            openai:
              apiKey: "${OPENAI_API_KEY}"
              model: "gpt-4"
          tools:
            - name: "kubernetes"
              type: "kubernetes"
            - name: "prometheus"
              type: "prometheus"
              config:
                url: "http://prometheus-server.monitoring.svc.cluster.local"
            - name: "git"
              type: "git"
              config:
                repo: "{{ git_repo_url }}"
                branch: "{{ git_branch }}"
  when: node_role == 'master' and kagent_enabled

- name: Create kagent deployment
  kubernetes.core.k8s:
    name: kagent
    namespace: "{{ kagent_namespace }}"
    api_version: apps/v1
    kind: Deployment
    state: present
    definition:
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: kagent
        template:
          metadata:
            labels:
              app: kagent
          spec:
            serviceAccountName: kagent
            containers:
              - name: kagent
                image: "kagent/kagent:{{ kagent_version }}"
                ports:
                  - containerPort: 8080
                    name: http
                env:
                  - name: KAGENT_CONFIG
                    value: "/etc/kagent/kagent.yaml"
                  - name: KAGENT_NAMESPACE
                    value: "{{ kagent_namespace }}"
                resources:
                  requests:
                    memory: "{{ kagent_resources.requests.memory }}"
                    cpu: "{{ kagent_resources.requests.cpu }}"
                  limits:
                    memory: "{{ kagent_resources.limits.memory }}"
                    cpu: "{{ kagent_resources.limits.cpu }}"
                volumeMounts:
                  - name: config
                    mountPath: /etc/kagent
                    readOnly: true
            volumes:
              - name: config
                configMap:
                  name: kagent-config
  when: node_role == 'master' and kagent_enabled

- name: Create kagent service
  kubernetes.core.k8s:
    name: kagent
    namespace: "{{ kagent_namespace }}"
    api_version: v1
    kind: Service
    state: present
    definition:
      spec:
        selector:
          app: kagent
        ports:
          - port: 80
            targetPort: 8080
            name: http
        type: ClusterIP
  when: node_role == 'master' and kagent_enabled

- name: Create kagent ingress
  kubernetes.core.k8s:
    name: kagent
    namespace: "{{ kagent_namespace }}"
    api_version: networking.k8s.io/v1
    kind: Ingress
    state: present
    definition:
      spec:
        rules:
          - host: "kagent.{{ k3s_master_ip }}.nip.io"
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: kagent
                      port:
                        number: 80
  when: node_role == 'master' and kagent_enabled

- name: Wait for kagent to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: kagent
    namespace: "{{ kagent_namespace }}"
    wait: true
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 600
  when: node_role == 'master' and kagent_enabled

- name: Display kagent status
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: kagent
    namespace: "{{ kagent_namespace }}"
  register: kagent_status
  when: node_role == 'master' and kagent_enabled

- name: Show kagent access information
  debug:
    msg:
      - "Kagent is now running!"
      - "Dashboard URL: http://kagent.{{ k3s_master_ip }}.nip.io"
      - "Or use port-forward: kubectl port-forward -n {{ kagent_namespace }} svc/kagent 8080:80"
      - "Then access: http://localhost:8080"
  when: node_role == 'master' and kagent_enabled
